@inject AuthorService AuthorService

<EditForm
    Model="book"
    OnValidSubmit="OnValidSubmit"
>
    <DataAnnotationsValidator />

    <div class="form-group">
        <label for="title">Title:</label>
        <InputText
            id="title"
            @bind-Value="book.Title"
            class="form-control"
        ></InputText>
    </div>
    <div class="form-group">
        <label for="barcode">Barcode:</label>
        <InputText id="barcode" @bind-Value="product.Barcode" class="form-control"></InputText>
    </div>
    <div class="form-group">
        <label for="price">Price:</label>
        <InputNumber id="price" @bind-Value="product.Price" class="form-control"></InputNumber>
    </div>
    <div class="form-group">
        <label for="releaseDate">Release Date:</label>
        <InputDate id="releaseDate" @bind-Value="product.ReleaseDate" class="form-control"></InputDate>
    </div>
    <div class="form-group">
        <label for="description">Description:</label>
        <InputTextArea id="description" @bind-Value="product.Description" class="form-control"></InputTextArea>
    </div>
    <button type="submit" class="btn btn-primary">Update</button>
</EditForm>


@code {

    [Parameter]
    public EditableBook book { get; set; }

    [Parameter]
    public EventCallback OnValidSubmit { get; set; }


    private ServiceResponse<List<AuthorDTO>> authors;

    protected override async Task OnInitializedAsync()
    {

        books = await BookService.GetBooks(pagination);

    }

}
