@page "/"
@inject BookService BookService
@inject NavigationManager NavigationManager

<PageTitle>Books</PageTitle>

<h1>Books</h1>


@if (books == null)
{
  <p><em>Loading...</em></p>
}
else
{
  <button
  class="btn btn-primary"
  @onclick="GoToAdding"
>Dodaj nowa ksiazke</button>
  <div
  class="d-flex flex-column align-items-center"
  style="width: 100%;gap:10px;"
>
  @foreach (var book in books.data.data)
    {
      <div
        class="card"
        style="width: 80%; min-width:200px;max-width:700px"
      >
        <div class="card-body">
          <h5 class="card-title">@book.title</h5>
          <h6 class="card-subtitle mb-2 text-body-secondary">@(book.author.firstName + " " + book.author.lastName)</h6>
          <p class="card-text">@RoundPrice(book.price) zł za @book.pageCount stron
          </p>
          <button
            class="btn btn-danger"
            @onclick="()=> DeleteBook(book.id)"
          >Usuń</button>
          <button
            class="btn btn-primary"
            @onclick="()=> GoToEdit(book.id)"
          >Edytuj</button>
        </div>
      </div>
    }
  </div>

  <nav
  class="d-flex flex-column align-items-center"
  style="width: 100%;"
>
  <ul class="pagination">
    @if (pagination.page <= 0)
      {
        <li class="page-item disabled">
          <button class="page-link">Previous</button>
        </li>
      }
      else
      {
        <li class="page-item">
          <button
            class="page-link"
            @onclick="()=>PreviousPage()"
          >Previous</button>
        </li>

      }
      <li class="page-item">
        <span class="page-link"> @(pagination.page + 1)
        </span>
      </li>
      @if (pagination.page + 1 >= books.data.pageCount)
      {
        <li class="page-item disabled">
          <button class="page-link">Next</button>
        </li>
      }
      else
      {

        <li class="page-item">
          <button
            class="page-link"
            @onclick="()=>NextPage()"
          >Next</button>
        </li>
      }
    </ul>
  </nav>
}

@code {
  private ServiceResponse<PaginableResponse<List<BookDTO>>>? books;
  private Pagination pagination = new Pagination()
    {
      page = 0,
      take = 5
    };
  protected override async Task OnInitializedAsync()
  {
    books = await BookService.GetBooks(pagination);
  }

  private decimal RoundPrice(decimal price)
  {
    decimal roundedNumber = Math.Round(price, 2);

    return roundedNumber;
  }

  private async Task DeleteBook(int id)
  {
    await BookService.deleteBook(id);
    books = await BookService.GetBooks(pagination);
  }

  private async Task PreviousPage()
  {
    if (pagination.page <= 0) return;
    pagination.page = pagination.page - 1;
    books = await BookService.GetBooks(pagination);
  }

  private async Task NextPage()
  {
    if (pagination.page + 1 >= books.data.pageCount) return;
    pagination.page = pagination.page + 1;
    books = await BookService.GetBooks(pagination);
  }
  private void GoToEdit(int id)
  {
    NavigationManager.NavigateTo($"/books/editproduct/{id}");
  }

  private void GoToAdding()
  {
    NavigationManager.NavigateTo($"/books/createbook");
  }
}
